// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ErrorCode.
const (
	DURATIONTOOLONG     ErrorCode = "DURATION_TOO_LONG"
	INVALIDPASSCODE     ErrorCode = "INVALID_PASSCODE"
	INVALIDTIMEINTERVAL ErrorCode = "INVALID_TIME_INTERVAL"
	PASTTIME            ErrorCode = "PAST_TIME"
	TIMECONFLICT        ErrorCode = "TIME_CONFLICT"
)

// CreateReservationRequest defines model for CreateReservationRequest.
type CreateReservationRequest struct {
	// DjName DJ display name (emojis allowed)
	DjName string `json:"djName"`

	// EndTime Must be on 15-minute intervals, max 1 hour from start
	EndTime time.Time `json:"endTime"`

	// Passcode 4-digit passcode for deletion
	Passcode string `json:"passcode"`

	// StartTime Must be on 15-minute intervals
	StartTime time.Time `json:"startTime"`
}

// Error defines model for Error.
type Error struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

// ErrorCode defines model for Error.Code.
type ErrorCode string

// Reservation defines model for Reservation.
type Reservation struct {
	CreatedAt time.Time `json:"createdAt"`

	// DjName DJ display name (emojis allowed)
	DjName    string             `json:"djName"`
	EndTime   time.Time          `json:"endTime"`
	Id        openapi_types.UUID `json:"id"`
	StartTime time.Time          `json:"startTime"`
}

// StreamStatus defines model for StreamStatus.
type StreamStatus struct {
	// CurrentDj Name of current DJ (null if no one is scheduled)
	CurrentDj *string `json:"currentDj,omitempty"`

	// CurrentEndTime End time of current session
	CurrentEndTime *time.Time `json:"currentEndTime,omitempty"`

	// CurrentStartTime Start time of current session
	CurrentStartTime *time.Time `json:"currentStartTime,omitempty"`

	// HlsUrl HLS playback URL for viewers
	HlsUrl string `json:"hlsUrl"`

	// IsLive Whether stream is currently live
	IsLive bool `json:"isLive"`

	// NextDj Name of next DJ
	NextDj *string `json:"nextDj,omitempty"`

	// NextStartTime Start time of next session
	NextStartTime *time.Time `json:"nextStartTime,omitempty"`

	// RtmpUrl RTMP ingest URL for DJ
	RtmpUrl string `json:"rtmpUrl"`
}

// TimeSlot defines model for TimeSlot.
type TimeSlot struct {
	Available bool      `json:"available"`
	EndTime   time.Time `json:"endTime"`
	StartTime time.Time `json:"startTime"`
}

// GetAvailableSlotsParams defines parameters for GetAvailableSlots.
type GetAvailableSlotsParams struct {
	Date openapi_types.Date `form:"date" json:"date"`
}

// GetReservationsParams defines parameters for GetReservations.
type GetReservationsParams struct {
	// Date Filter by date (optional, defaults to today and tomorrow)
	Date *openapi_types.Date `form:"date,omitempty" json:"date,omitempty"`
}

// DeleteReservationJSONBody defines parameters for DeleteReservation.
type DeleteReservationJSONBody struct {
	// Passcode 4-digit passcode
	Passcode string `json:"passcode"`
}

// CreateReservationJSONRequestBody defines body for CreateReservation for application/json ContentType.
type CreateReservationJSONRequestBody = CreateReservationRequest

// DeleteReservationJSONRequestBody defines body for DeleteReservation for application/json ContentType.
type DeleteReservationJSONRequestBody DeleteReservationJSONBody

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXUXPaOBD+Kzu6PqQzToG73EyPNy7QHh2aZID2Hjq5jGIvoJwsudKalMnw328kGbBj",
	"hzpNH+4NrNXu6vu+3ZUeWKzTTCtUZFn/gdl4hSn3P88NcsIpWjRrTkKrKX7N0ZJby4zO0JBAb5ncXfAU",
	"/S+0sRGZs2Z9NvwAibCZ5BtQPEU4wVTfCQtcSn2PyWsWsZR/m6Ba0or1e91uxFKh9v8jRpsMWZ9ZMkIt",
	"2TZiqJK5aAr1MbcEtwhaQe/301SonBCEIpe7tBGk/Bv0YKVzAwujU7DEDbGILbRJObE+SzjhKTnfDWEz",
	"bm2sk4a4Z6eJWAqCnQUstIEEJfp1t5MIjbP850v39I/rh7Ptq6YIPp8fOVrLM2wjZvBrLgwmrP9lx1g5",
	"7gHc0nmv94707R3G5FIdGaNNXQQ7fFDlqQsxH38c3ZxfXrybjM/nLGJXg9n8xn1kERtffB5MxkP/92Z8",
	"MR9NPw8mLGLDT9PBfHx5cTO/vLyZXF68L9leDWaz88vhqJTTAb4UreVLH//4wX2WB/um85UU33BKXxTJ",
	"wFdBO/H8xOo4Vg/tkhFJxTbPRfJdOf6AvrzX74jsAGUTCzMyyNMZccptAw25MahoeFeH1cUEvYDCBIYf",
	"4ETlUoJYgNKgFYKw4PpckssAc+34xd7RU91mpBJwOJTjWLQ21Hw7Jop9s6cL3y+9OM5K2k9G1r3/NZmB",
	"E98tj/+FT9OJ71xrgfdoKk0lN6JRSHYi1g1J/71CWqEB6/lzUBeJyw1It2Pv61ZriVw5Zwq/HeXSrcPw",
	"Q1Mebqk1ht7PcwE0lGaNCE7nH69AqCVa2gPokzyO3eNSCUAe4uwpayoLd8qZ1A1DmK+5kPxWlptgCeJn",
	"d4qXtoDmoj9kWT+d8yDUQteRHlyNC3QB174IvLqEWgIvSpGcU0i54ktMUbnZToIcGq7Rjvyu2X7XbGMJ",
	"UxhcjVnE1mhsiNN7033TdYfXGSqeCdZnv/lPfpCvPM6d/RFOrdTh1rRET4ijw8+NccL67D3SYGc685bO",
	"i+Epkiux/pcHJlzQrzmaDYuY8lPCI8zKUJLJMSouZjUuGmi4dpttppUNwvi12w3zWZHDxUkly6SIfaad",
	"OxvG3MG/IEz9xlcGF6zPfukcroid4n7Y2etwu0+AG8M3gcVH7O1QCHUYUHNmNk9TbjYBK+BNZhEjvnRg",
	"uTPtxrJl1257p/LpCA3Tsl2NhGqy74QkNHC7AQcvnGi/wGUECS54LskCaSCd8E3Qnk61MfrezZEjdP7P",
	"6CvfcVowOBGWXP+sAF5nsLzs67UO09OERizTtoG/2jOkKA609KdONs/C5hgkTz53ttXO5spxW+Oo99Py",
	"qFBTp6K0DMUNyjF49kyVHMsgXPAbYo/VmkuRQAE/nPhCjbVaSBFT5B5BYdZGgBS/ef1IIgFh4KDwvqyV",
	"9kXeeSj9GyfbMCkkEtZ1M/Tfq7ppar+usR/KteK/XRtuvkOHOv4xmVYHe/vHZ+v35qNRfeS510b7Zw1X",
	"o5JKA0GFSnt1252q9ll4w+84VZpgoXOVPNJYYB14e32Fq0TH7l8aT02RyovkhU36WPlV4jRU4fnuIVDc",
	"sFVQYugXj1tyXDW2u+x3gITvDgq3Fc16Vxu5u/GyFVHW73SkjrlcaUv9t9233Q7PRGfdY9vr7X8BAAD/",
	"/28/BIw/EgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
