// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ErrorCode.
const (
	DURATIONTOOLONG     ErrorCode = "DURATION_TOO_LONG"
	EXCEEDSEVENTEND     ErrorCode = "EXCEEDS_EVENT_END"
	INVALIDPASSCODE     ErrorCode = "INVALID_PASSCODE"
	INVALIDTIMEINTERVAL ErrorCode = "INVALID_TIME_INTERVAL"
	INVALIDTIMERANGE    ErrorCode = "INVALID_TIME_RANGE"
	PASTTIME            ErrorCode = "PAST_TIME"
	RANGETOOLARGE       ErrorCode = "RANGE_TOO_LARGE"
	TIMECONFLICT        ErrorCode = "TIME_CONFLICT"
)

// CreateReservationRequest defines model for CreateReservationRequest.
type CreateReservationRequest struct {
	// DjName DJ display name (emojis allowed)
	DjName string `json:"djName"`

	// EndTime Must be on 15-minute intervals, max 1 hour from start
	EndTime time.Time `json:"endTime"`

	// Passcode 4-digit passcode for deletion
	Passcode string `json:"passcode"`

	// StartTime Must be on 15-minute intervals
	StartTime time.Time `json:"startTime"`
}

// Error defines model for Error.
type Error struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

// ErrorCode defines model for Error.Code.
type ErrorCode string

// Reservation defines model for Reservation.
type Reservation struct {
	CreatedAt time.Time `json:"createdAt"`

	// DjName DJ display name (emojis allowed)
	DjName    string             `json:"djName"`
	EndTime   time.Time          `json:"endTime"`
	Id        openapi_types.UUID `json:"id"`
	StartTime time.Time          `json:"startTime"`
}

// StreamStatus defines model for StreamStatus.
type StreamStatus struct {
	// CurrentDj Name of current DJ (null if no one is scheduled)
	CurrentDj *string `json:"currentDj,omitempty"`

	// CurrentEndTime End time of current session
	CurrentEndTime *time.Time `json:"currentEndTime,omitempty"`

	// CurrentStartTime Start time of current session
	CurrentStartTime *time.Time `json:"currentStartTime,omitempty"`

	// IsLive Whether stream is currently live
	IsLive bool `json:"isLive"`

	// NextDj Name of next DJ
	NextDj *string `json:"nextDj,omitempty"`

	// NextStartTime Start time of next session
	NextStartTime *time.Time `json:"nextStartTime,omitempty"`
}

// TimeSlot defines model for TimeSlot.
type TimeSlot struct {
	Available bool      `json:"available"`
	EndTime   time.Time `json:"endTime"`
	StartTime time.Time `json:"startTime"`
}

// GetAvailableSlotsParams defines parameters for GetAvailableSlots.
type GetAvailableSlotsParams struct {
	StartTime time.Time  `form:"startTime" json:"startTime"`
	EndTime   *time.Time `form:"endTime,omitempty" json:"endTime,omitempty"`
}

// DeleteReservationJSONBody defines parameters for DeleteReservation.
type DeleteReservationJSONBody struct {
	// Passcode 4-digit passcode
	Passcode string `json:"passcode"`
}

// CreateReservationJSONRequestBody defines body for CreateReservation for application/json ContentType.
type CreateReservationJSONRequestBody = CreateReservationRequest

// DeleteReservationJSONRequestBody defines body for DeleteReservation for application/json ContentType.
type DeleteReservationJSONRequestBody DeleteReservationJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get available time slots within a time range
	// (GET /available-slots)
	GetAvailableSlots(ctx echo.Context, params GetAvailableSlotsParams) error
	// Get reservations for today and tomorrow
	// (GET /reservations)
	GetReservations(ctx echo.Context) error
	// Create a new reservation
	// (POST /reservations)
	CreateReservation(ctx echo.Context) error
	// Delete a reservation
	// (DELETE /reservations/{reservationId})
	DeleteReservation(ctx echo.Context, reservationId openapi_types.UUID) error
	// Get current stream status
	// (GET /stream/status)
	GetStreamStatus(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAvailableSlots converts echo context to params.
func (w *ServerInterfaceWrapper) GetAvailableSlots(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAvailableSlotsParams
	// ------------- Required query parameter "startTime" -------------

	err = runtime.BindQueryParameter("form", true, true, "startTime", ctx.QueryParams(), &params.StartTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startTime: %s", err))
	}

	// ------------- Optional query parameter "endTime" -------------

	err = runtime.BindQueryParameter("form", true, false, "endTime", ctx.QueryParams(), &params.EndTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endTime: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAvailableSlots(ctx, params)
	return err
}

// GetReservations converts echo context to params.
func (w *ServerInterfaceWrapper) GetReservations(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetReservations(ctx)
	return err
}

// CreateReservation converts echo context to params.
func (w *ServerInterfaceWrapper) CreateReservation(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateReservation(ctx)
	return err
}

// DeleteReservation converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteReservation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "reservationId" -------------
	var reservationId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "reservationId", runtime.ParamLocationPath, ctx.Param("reservationId"), &reservationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reservationId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteReservation(ctx, reservationId)
	return err
}

// GetStreamStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStreamStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStreamStatus(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/available-slots", wrapper.GetAvailableSlots)
	router.GET(baseURL+"/reservations", wrapper.GetReservations)
	router.POST(baseURL+"/reservations", wrapper.CreateReservation)
	router.DELETE(baseURL+"/reservations/:reservationId", wrapper.DeleteReservation)
	router.GET(baseURL+"/stream/status", wrapper.GetStreamStatus)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xXb28aORP/KiM/fZFKmwB9ctfevuOAq4goREB7J1U55OwO4Mhrb20vCYr47ifbCyzs",
	"QrZt1Few9nj+/OY34/EziWSSSoHCaBI+Ex0tMaHub0chNThGjWpFDZNijN8y1MbupUqmqAxDJxk/DGmC",
	"7h/qSLHUSpOQdG8gZjrldA2CJggXmMgHpoFyLh8xfksCktCnAYqFWZKw1WwGJGFi9x0Qs06RhEQbxcSC",
	"bAKCIp6yKlOfMm3gHkEKaP12mTCRGQQmjPWd6wAS+gQtWMpMwVzJBLShypCAzKVKqCEhianBS2N1V5hN",
	"qdaRjCvsXl/GbMEMbCVgLhXEyNHt25PGoLKS/35tXv5x93y9eVNlwfnzI6HVjGETEIXfMqYwJuHXbcaK",
	"dvfgFuK92ymS9w8YGetqTympyiTY4oMiS6yJaf9Tb9YZDf8a9DtTEpDb9mQ6s4skIP3hl/ag33Wfs/5w",
	"2ht/aQ9IQLqfx+1pfzScTUej2WA0/FiQvW1PJp1Rt3R83B5+tIvu1x9sj91K759Or9edzHpfesPprDfs",
	"FsLZI5+g1nThXD+PmQtwL18FTaFYKgBy9RS3XQHV490rFta5UqrnDIsPZLOMxS8y+Qeo6bS+wM89lFVZ",
	"mBiFNJkYajJdkYZMKRSm+1CG1doEOYdcBLo3cCEyzoHNQUiQAoFpsC0yzriHuRR+frZ3qlH1RAwWh6Id",
	"jVr7dlEvE/m5yeme4bZ+2g7TA7aq0P73Es0SFWgHtMUkt8DXwO2Jna57KTlSYZUJfDoLut2H7k2VH3ar",
	"drBOz/dFesxAH3YVtawDEy4r7kC6oozTe15sJIXov7vafraMqgtn72U5OquBibksA9y+7bt7rXsDuHJE",
	"colnYgE0p7OxSiGhgi4wQWGvVsOMRcM2q547Ndmdmqy1wQTat30SkBUq7e20rppXTRu8TFHQlJGQ/N8t",
	"uXt06XBu7EK41Fz6oWWBLiE2Ha739mMSko9o2lvRiZO0WhRN0KDSJPz6TJg1+i1DtSYBEa7THuC2x9Oo",
	"DIN8ODpFQDkHs0Rw+kBRsUC46E9G8OH3Zgs+Tzvgs/i2NimrHdwn85Q7tsXUdeYKujinGTcajIT379yI",
	"pAszkrXl+5+BVMkVizG+qhvCncVQp1JoXyTvmk0/KghjOWLLJk05i1zWGg/aX5v7uJjBxB18o3BOQvK/",
	"xn5abeSjamNXk5udA1QpuvaMPmLylhG+XTgGwSMzSyYcXjrFiM0Zxh4zq/L6O30+56ofnSr86osV5Sy/",
	"GXy6pAJ8ihBjDe/fXbrJlbOEGVfpOksSqtae5kDPREULOm2G6MJy36ZlO6locmdVNg6WzlTVuCj3KxJc",
	"nKpq5HjAtCvGg3jKoBW3XXczMqZr39BkIpWSj6fxCkgqdQU8pTdT3kVQmz9lvH41Ip18m20O7wHbtzal",
	"HLVezY+D1JRTUdiGfGb75SWVww8Xrg4iKeacRSawLzY/NASAJrp6e0QRjzBQEPhY5Er9Gmo8F7768cY3",
	"ao4Gy7zpuvVD3lRdVvYa3F8FB/rP3lcvTO2+Uf8YTQ/HoPov5dqP46PB5szbtA73r8ueFVnqE5SztFWW",
	"3bJq54UTfEGpvTvnMhPxEcd81oHW55cfvBp697Y51aQP3kA/2aTPld+BnYoq7GyfHvlTQXgm+n5x3JKj",
	"Q2G99X4LiF+3UNijqFbb2sgUJyFZGpOGjQaXEeVLqU34ofmh2aApa6xaZHO3+S8AAP//w6yFquwSAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
