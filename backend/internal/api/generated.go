// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ErrorCode.
const (
	BEFOREEVENTSTART    ErrorCode = "BEFORE_EVENT_START"
	DURATIONTOOLONG     ErrorCode = "DURATION_TOO_LONG"
	EXCEEDSEVENTEND     ErrorCode = "EXCEEDS_EVENT_END"
	INVALIDPASSCODE     ErrorCode = "INVALID_PASSCODE"
	INVALIDTIMEINTERVAL ErrorCode = "INVALID_TIME_INTERVAL"
	INVALIDTIMERANGE    ErrorCode = "INVALID_TIME_RANGE"
	PASTTIME            ErrorCode = "PAST_TIME"
	RANGETOOLARGE       ErrorCode = "RANGE_TOO_LARGE"
	TIMECONFLICT        ErrorCode = "TIME_CONFLICT"
)

// CreateReservationRequest defines model for CreateReservationRequest.
type CreateReservationRequest struct {
	// DjName DJ display name (emojis allowed)
	DjName string `json:"djName"`

	// EndTime Must be on 15-minute intervals, max 1 hour from start
	EndTime time.Time `json:"endTime"`

	// Passcode 4-digit passcode for deletion
	Passcode string `json:"passcode"`

	// StartTime Must be on 15-minute intervals
	StartTime time.Time `json:"startTime"`
}

// Error defines model for Error.
type Error struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

// ErrorCode defines model for Error.Code.
type ErrorCode string

// EventConfig defines model for EventConfig.
type EventConfig struct {
	// EventEndTime Event end time (can be null if not configured)
	EventEndTime *time.Time `json:"eventEndTime,omitempty"`

	// EventStartTime Event start time (can be null if not configured)
	EventStartTime *time.Time `json:"eventStartTime,omitempty"`
}

// Reservation defines model for Reservation.
type Reservation struct {
	CreatedAt time.Time `json:"createdAt"`

	// DjName DJ display name (emojis allowed)
	DjName    string             `json:"djName"`
	EndTime   time.Time          `json:"endTime"`
	Id        openapi_types.UUID `json:"id"`
	StartTime time.Time          `json:"startTime"`
}

// StreamStatus defines model for StreamStatus.
type StreamStatus struct {
	// CurrentDj Name of current DJ (null if no one is scheduled)
	CurrentDj *string `json:"currentDj,omitempty"`

	// CurrentEndTime End time of current session
	CurrentEndTime *time.Time `json:"currentEndTime,omitempty"`

	// CurrentStartTime Start time of current session
	CurrentStartTime *time.Time `json:"currentStartTime,omitempty"`

	// IsLive Whether stream is currently live
	IsLive bool `json:"isLive"`

	// NextDj Name of next DJ
	NextDj *string `json:"nextDj,omitempty"`

	// NextStartTime Start time of next session
	NextStartTime *time.Time `json:"nextStartTime,omitempty"`

	// ViewerCount Number of current viewers
	ViewerCount *int `json:"viewerCount,omitempty"`
}

// TimeSlot defines model for TimeSlot.
type TimeSlot struct {
	Available bool      `json:"available"`
	EndTime   time.Time `json:"endTime"`
	StartTime time.Time `json:"startTime"`
}

// GetAvailableSlotsParams defines parameters for GetAvailableSlots.
type GetAvailableSlotsParams struct {
	StartTime time.Time  `form:"startTime" json:"startTime"`
	EndTime   *time.Time `form:"endTime,omitempty" json:"endTime,omitempty"`
}

// GetReservationsParams defines parameters for GetReservations.
type GetReservationsParams struct {
	Date *string `form:"date,omitempty" json:"date,omitempty"`
}

// DeleteReservationJSONBody defines parameters for DeleteReservation.
type DeleteReservationJSONBody struct {
	// Passcode 4-digit passcode
	Passcode string `json:"passcode"`
}

// CreateReservationJSONRequestBody defines body for CreateReservation for application/json ContentType.
type CreateReservationJSONRequestBody = CreateReservationRequest

// DeleteReservationJSONRequestBody defines body for DeleteReservation for application/json ContentType.
type DeleteReservationJSONRequestBody DeleteReservationJSONBody

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RYb3PaOBP/Kjt6+iKdcQL0yV17vKNAO2RSyADt3Uwnl1HsBZSTJVeSSZgM3/1Gko1N",
	"bIjb5u5eJUir/fPb365WfiShjBMpUBhNuo9EhyuMqfu3r5AanKJGtaaGSTHFbylqY/cSJRNUhqGTjO7G",
	"NEb3H+pQscRKky4ZXEDEdMLpBgSNEU4wlndMA+Vc3mP0mgQkpg+XKJZmRbqddjsgMRO73wExmwRJl2ij",
	"mFiSbUBQRHNWZ+pTqg3cIkgBnV9OYyZSg8CEsb5zHUBMH6ADK5kqWCgZgzZUGRKQhVQxNaRLImrw1Fjd",
	"NWYTqnUooxq756cRWzIDuQQspIIIObp9e9IYVFbyz6/t09+uH8+3r+osOH9+JLSGMWwDovBbyhRGpPs1",
	"z1jZbgFuKd7rnSJ5e4ehsa4OlZKqSoIcHxRpbE3MR5+GN/3J+MPlqD8nAbnqzeY3dpEEZDT+0rscDdzP",
	"m9F4Ppx+6V2SgAw+T3vz0WR8M59Mbi4n448l2avebNafDCrHp73xR7vo/vqDvalbGf7RHw4Hs5vhl+F4",
	"fjMcD0hA3g8/TKbDbGk2703npRiLdMSoNV26eI4D6aIu5GvxWqMwfSkWbFlFDe3m8BCr3VFAEYHNKpyE",
	"VFgmiJRzYAsQ0kDoFKfKl1MzOjujs8OM82YdNV7S8LYGnFJ7qaGU60BRz7WcZqG9YCs61nyaOcOiPdk0",
	"ZdGztf8Dxey0PlPRBZR1FJ0ZhTSeGWpSXZOGVCkUZnBXhdXaBLmATAQGF3BSkASkQGAa7KUSpdzDXAk/",
	"O3u4CHL6l+xo1No32GaZyM4d4fysYPtP2GH6kq1rtP++QrNCBdoBbTHJLPANcHtip+tWSo5UWGUCH46C",
	"bvdhcFHnh91qHKzT872Rrhneo+rLVJgaD9P4FlUZSC+uC032AluiqpLZI1jHUhvLjMuaAYSuKeP0lpcb",
	"dgnI7y7cn63I+hosvKxGZzUwsZBVLHtXIzdUDC4As75sOcTEEmhWGcYqhZgKusQYhZ1rDDMWDdv3fDef",
	"7U7NNtpgDL2rEQnIGpX2djpn7bO2DV4mKGjCSJf83y25IWblcG7tQjjVXPqJcYkuITYdro2PItIlH9H0",
	"ctGZk7RaFI3RWBZ0vz4SZo1+S1FtSECEa9p7uBV4GpVikE2mh7gsF2BWCE4fKCqWCCej2QTe/druwOd5",
	"H3wWm19V9Q4WyTzkju1WTZ05gwEuaMqNBiPh7Rs3n+rSgGpt5fdtouSaRRidNQ3h2mKoEym0L5I37baf",
	"04RBX7Q0STgLXdZad9rfwEVczGDsDr5SuCBd8r9W8VRoZe+E1q4mi8udKkU3ntFPmJwzwncexyC4Z2bF",
	"hMNLJxiyBcPIY2ZVnn+nz8dc9XNrjV8jsaacZZeMT5dUgA8hYqTh7ZtT92zgLGbGVbpO45iqjac50CNR",
	"0ZJOmyG6tNy3acmHHk2urcqWK+3TcDclHqqq8jD5k/k9ilXJTA1ivqXkE6Cf3qrIYFUKmAh5Gtk25MdL",
	"28Ly+VaXIMqQ8ODs4XUEnGlZrlHDsfVzpJg/MG5QwU4RnBTXtq3JVGMEtxu4peFfKKLAlq5FP4KFO2nj",
	"lIJvXv9X5VkerxtU6CXTrpWWAS9XaDHzZ8lNUDEZwUnpPeVeZbaf7Z5dbuV1XelwftBUWf/h0glIInUN",
	"GSrfLrILBbV5L6PNi9XJwW8k2/2RwF5h20rCOy/mx16eq3ktbUP2EvjXu2sGP5y4lmiZxFloAkio9qNo",
	"AGjCs6c88QgDBYH3ZbIcb6flpdZj6dco2voy52iwypuBW9/nTV0bsRNR0UX29B8dXZ55C/qm8GM03Z+I",
	"m3+xavyR6smMe+QbURPun1c9K7PUJyhjaacqm7Nq54UTfEapbdkLmYroCcd81oE255efwVt692I+dCXt",
	"vaz/wQt7z05NFfbzB232ABWeifUXd7gvrHPvc0D8uoXCHkW1zmsjVZx0ycqYpNtqcRlSvpLadN+137Vb",
	"NGGtdYdsr7d/BwAA//+9t2+ddBYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
