name: PR Build Check

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'mediamtx/**'
      - 'api/**'
      - '.github/workflows/**'

jobs:
  test-codegen-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'backend/go.mod'
          cache-dependency-path: 'backend/go.sum'
      
      - name: Check code generation
        working-directory: ./backend
        run: |
          go get -tool github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen@latest
          go tool oapi-codegen -package api -generate types,spec ../api/openapi.yaml > generated_test.go
          diff generated_test.go internal/api/generated.go || (echo "Generated code is out of sync. Please run 'make generate-api'" && exit 1)

  lint-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'backend/go.mod'
          cache-dependency-path: 'backend/go.sum'
      
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          working-directory: ./backend
          args: --timeout=5m

  lint-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Run TypeScript check
        working-directory: ./frontend
        run: npm run type-check || npx tsc --noEmit
      
      - name: Run ESLint
        working-directory: ./frontend
        run: npm run lint || npx eslint .

  integration-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Create .env file for CI
        run: |
          cat > .env << EOF
          PRODUCTION_DOMAIN=http://localhost
          DB_PASSWORD=postgres
          EVENT_START_TIME=$(date '+%Y-%m-%d %H:%M:%S')
          EVENT_END_TIME=$(date -d '+3 days' '+%Y-%m-%d %H:%M:%S')
          EVENT_TIMEZONE=UTC
          EOF
      
      - name: Start services
        run: |
          docker compose up -d
          sleep 10
      
      - name: Check service health
        run: |
          # Check backend health
          curl -f http://localhost/health || exit 1
          
          # Check API endpoints
          curl -f http://localhost/api/v1/stream/status || exit 1
          curl -f http://localhost/api/v1/reservations || exit 1
          
          echo "All services are healthy!"
      
      - name: Run API tests
        run: |
          # Calculate times on 15-minute intervals
          # Get current time + 1 hour, rounded to next 15-minute interval
          NOW=$(date +%s)
          HOUR_LATER=$((NOW + 3600))
          # Round up to next 15-minute interval
          START_TIME=$((((HOUR_LATER + 899) / 900) * 900))
          END_TIME=$((START_TIME + 3600))
          
          # Format times
          START_TIME_STR=$(date -u -d "@$START_TIME" '+%Y-%m-%dT%H:%M:%S')
          END_TIME_STR=$(date -u -d "@$END_TIME" '+%Y-%m-%dT%H:%M:%S')
          
          # Test reservation creation
          RESPONSE=$(curl -s -X POST http://localhost/api/v1/reservations \
            -H "Content-Type: application/json" \
            -d "{
              \"djName\": \"Test DJ\",
              \"startTime\": \"${START_TIME_STR}Z\",
              \"endTime\": \"${END_TIME_STR}Z\",
              \"passcode\": \"1234\"
            }")
          
          echo "Reservation created: $RESPONSE"
          
          # Check if reservation ID exists in response
          echo "$RESPONSE" | grep -q '"id"' || exit 1
      
      - name: Stop services
        if: always()
        run: docker compose down
      
      - name: Show logs on failure
        if: failure()
        run: |
          docker compose logs backend
          docker compose logs frontend
          docker compose logs nginx