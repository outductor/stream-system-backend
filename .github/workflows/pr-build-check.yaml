name: PR Build Check

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'mediamtx/**'
      - 'api/**'
      - '.github/workflows/**'

jobs:
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            VITE_API_BASE_URL=/api/v1
            VITE_HLS_ENDPOINT=/hls/stream-endpoint/index.m3u8

  build-mediamtx:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Create override file if not exists
        run: |
          if [ ! -f "./mediamtx/mediamtx.override.yml" ]; then
            echo "# MediaMTX override configuration" > ./mediamtx/mediamtx.override.yml
            echo "paths:" >> ./mediamtx/mediamtx.override.yml
            echo "  stream-endpoint:" >> ./mediamtx/mediamtx.override.yml
            echo "    source: rtmp://localhost:1935/stream-endpoint" >> ./mediamtx/mediamtx.override.yml
          fi
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build MediaMTX Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./mediamtx
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  test-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache-dependency-path: backend/go.sum
      
      - name: Run tests
        working-directory: ./backend
        run: |
          go mod download
          go test -v ./...
      
      - name: Check code generation
        working-directory: ./backend
        run: |
          go install github.com/deepmap/oapi-codegen/cmd/oapi-codegen@latest
          oapi-codegen -package api -generate types,server,spec ../api/openapi.yaml > generated_test.go
          diff generated_test.go internal/api/generated.go || (echo "Generated code is out of sync. Please run 'make generate-api'" && exit 1)

  lint-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache-dependency-path: backend/go.sum
      
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          working-directory: ./backend
          args: --timeout=5m

  lint-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Run TypeScript check
        working-directory: ./frontend
        run: npm run type-check || npx tsc --noEmit
      
      - name: Run ESLint
        working-directory: ./frontend
        run: npm run lint || npx eslint .

  integration-test:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend, build-mediamtx]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Create override file if not exists
        run: |
          if [ ! -f "./mediamtx/mediamtx.override.yml" ]; then
            echo "# MediaMTX override configuration" > ./mediamtx/mediamtx.override.yml
            echo "paths:" >> ./mediamtx/mediamtx.override.yml
            echo "  stream-endpoint:" >> ./mediamtx/mediamtx.override.yml
            echo "    source: rtmp://localhost:1935/stream-endpoint" >> ./mediamtx/mediamtx.override.yml
          fi
      
      - name: Start services
        run: |
          docker compose up -d
          sleep 10
      
      - name: Check service health
        run: |
          # Check backend health
          curl -f http://localhost/health || exit 1
          
          # Check API endpoints
          curl -f http://localhost/api/v1/stream/status || exit 1
          curl -f http://localhost/api/v1/reservations || exit 1
          
          echo "All services are healthy!"
      
      - name: Run API tests
        run: |
          # Test reservation creation
          RESPONSE=$(curl -s -X POST http://localhost/api/v1/reservations \
            -H "Content-Type: application/json" \
            -d '{
              "djName": "Test DJ",
              "startTime": "'$(date -u -d "+1 hour" '+%Y-%m-%dT%H:%M:%S')'Z",
              "endTime": "'$(date -u -d "+2 hours" '+%Y-%m-%dT%H:%M:%S')'Z",
              "passcode": "1234"
            }')
          
          echo "Reservation created: $RESPONSE"
          
          # Check if reservation ID exists in response
          echo "$RESPONSE" | grep -q '"id"' || exit 1
      
      - name: Stop services
        if: always()
        run: docker compose down
      
      - name: Show logs on failure
        if: failure()
        run: |
          docker compose logs backend
          docker compose logs frontend
          docker compose logs nginx