services:
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - frontend
      - backend
      - mediamtx
    networks:
      - frontend
      - backend
      - streaming
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      args:
        # 開発環境では localhost を使用
        # 本番環境では PRODUCTION_DOMAIN 環境変数で実際のドメインを指定
        - VITE_API_BASE_URL=${PRODUCTION_DOMAIN:-http://localhost}/api/v1
        - VITE_HLS_ENDPOINT=${PRODUCTION_DOMAIN:-http://localhost}/hls/stream-endpoint/index.m3u8
    environment:
      - NODE_ENV=production
    networks:
      - frontend
    restart: unless-stopped

  postgres:
    image: postgres:17-alpine
    env_file:
      - path: ./.env
        required: true
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: stream_system
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/db/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build: ./backend
    env_file:
      - path: ./.env
        required: true
    environment:
      SERVER_HOST: 0.0.0.0
      SERVER_PORT: 8080
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_NAME: stream_system
      DB_SSLMODE: disable
      LOG_LEVEL: ${LOG_LEVEL:-info}
      EVENT_START_TIME: ${EVENT_START_TIME:-2025-08-29 00:00:00}
      EVENT_END_TIME: ${EVENT_END_TIME:-2025-08-31 14:59:59}
      EVENT_TIMEZONE: ${EVENT_TIMEZONE:-Asia/Tokyo}
    volumes:
      - ./media:/app/media
    networks:
      - backend
      - database
    depends_on:
      postgres:
        condition: service_healthy

  mediamtx:
    build: ./mediamtx
    ports:
      # RTMP (incoming video) port
      - "19350:1935"
    networks:
      - streaming

networks:
  frontend:
    driver: bridge
    name: dsr-frontend
  backend:
    driver: bridge
    name: dsr-backend
  database:
    driver: bridge
    internal: true
    name: dsr-database
  streaming:
    driver: bridge
    name: dsr-streaming

volumes:
  postgres_data:
